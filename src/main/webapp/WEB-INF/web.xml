<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!-- Servlet Filters ================================================ -->

    <!--
      - Declare a filter for multipart MIME handling
      -->
    <!--  字符集乱码过滤器-->
    <filter>
        <filter-name>charactorEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>charactorEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--
      - Declare a filter for debugging incoming request
      -->


    <!-- Filter mappings ================================================ -->

    <!--
      - Use the Cocoon multipart filter together with the Cocoon demo webapp
      -->


    <!--
      - Use the Cocoon debug filter together with the Cocoon demo webapp
    <filter-mapping>
      <filter-name>CocoonDebugFilter</filter-name>
      <servlet-name>Cocoon</servlet-name>
    </filter-mapping>
      -->

    <!-- Servlet Context Listener ======================================= -->

    <!--
      - Declare Spring context listener which sets up the Spring Application Context
      - containing all Cocoon components (and user defined beans as well).
      -->
    <!--  spring的监听器-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:conf/applicationContext.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--
      - Declare Spring request listener which sets up the required RequestAttributes
      - to support Springs and Cocoon custom bean scopes like the request scope or the
      - session scope.
      -->
    <!--  <listener>-->
    <!--    <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>-->
    <!--  </listener>-->

    <!-- Servlet Configuration ========================================== -->

    <!--
      - Servlet that dispatches requests to the Spring managed block servlets
      -->


    <!-- URL space mappings ============================================= -->

    <!--
      - Cocoon handles all the URL space assigned to the webapp using its sitemap.
      - It is recommended to leave it unchanged. Under some circumstances though
      - (like integration with proprietary webapps or servlets) you might have
      - to change this parameter.
      -->

    <servlet>
        <servlet-name>myweb</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:conf/dispatcherServlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>myweb</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>

</web-app>
